/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package watchupdated;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import org.imgscalr.Scalr;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.text.DecimalFormat;
import java.util.*;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;

/**
 *
 * @author petri
 */
public class App {

    static boolean radi = true;
    static boolean pristigao = false;
    static File[] sveSlike;
    static DecimalFormat dnf = new DecimalFormat("00000");
    static int tmp;
    static int prevval;
    static Thread t;
    static WatchKey key;
    //static boolean radi = true;

    static File[] listBezHidden(String path) {
        File files[] = new File(path).listFiles();
        ArrayList<File> fajls = new ArrayList<>();
        for (File f : files) {
            if (!f.getAbsolutePath().contains("/.") && f.getAbsolutePath().contains(".jpg")) {
                fajls.add(f);
                //System.out.println(f.getAbsolutePath());
            }
        }
        File[] fi = new File[fajls.size()];

        return (File[]) fajls.toArray(fi);
    }

    static BufferedImage resizeImage(boolean addWatermark, BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {
        BufferedImage scaled = Scalr.resize(originalImage, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, targetWidth, targetHeight, Scalr.OP_ANTIALIAS);
        if(addWatermark)
            watermark(scaled);
        return scaled;
    }

    public static int onStartCount() {
        String path = "C:\\Users\\petri\\Desktop\\Original";
        File files[] = new File(path).listFiles();
        int cnt = 0;
        for (File f : files) {
            if (!f.getAbsolutePath().contains("/.") && f.getAbsolutePath().matches(".*\\\\[0-9]{5}\\.jpg")) {
                cnt++;
                System.out.println(f.getAbsolutePath());
            }
        }
        return cnt;
    }

    public static void watermark(BufferedImage image) throws IOException {
        Graphics2D graphics2D = (Graphics2D) image.getGraphics();
        graphics2D.setFont(new Font("Arial", Font.BOLD, 90));
        graphics2D.setColor(Color.white);
        FontMetrics fontMetrics = graphics2D.getFontMetrics();
        Rectangle2D rect = fontMetrics.getStringBounds(tmp + "", graphics2D);

        // calculate center of the image
        int centerX = (image.getWidth() - (int) rect.getWidth()) / 2;
        int centerY = image.getHeight() / 2 + (int) rect.getHeight() / 2;

        graphics2D.drawString(tmp + "", centerX, centerY);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException, InterruptedException {
        tmp = onStartCount();
        System.out.println(tmp);
        prevval = tmp;
        WatchService watchService = FileSystems.getDefault().newWatchService();

        Path path = Paths.get("C:\\Users\\petri\\Desktop\\Original");
        path.register(
                watchService,
                StandardWatchEventKinds.ENTRY_CREATE,
                StandardWatchEventKinds.ENTRY_DELETE,
                StandardWatchEventKinds.ENTRY_MODIFY);

        while ((key = watchService.take()) != null) {
            for (WatchEvent<?> event : key.pollEvents()) {
                //proces
                if (!radi) {
                    pristigao = true;
                } else {
                    radi = false;
                    t = new Thread() {
                        @Override
                        public void run() {
                            try {
                                reku();
                            } catch (IOException ex) {
                                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    };
                    Thread.sleep(400);
                    t.start();  // call back run()
                }
            }
            key.reset();
        }
    }

    static int getHour(){
        Calendar rightNow = Calendar.getInstance();
        return rightNow.get(Calendar.HOUR_OF_DAY);
    }
    static int getMinutes(){
        Calendar rightNow = Calendar.getInstance();
        return rightNow.get(Calendar.MINUTE)<30 ? 0 : 3;
    }
    
    static void reku() throws IOException {

        sveSlike = listBezHidden("C:\\Users\\petri\\Desktop\\Original");
        Arrays.sort(sveSlike);
        int nigger = sveSlike.length;
        /*
        for (File f : sveSlike) {
            System.out.println(f.getAbsolutePath());
        }
*/
        while (prevval < nigger) {
            File f = sveSlike[prevval];
            
            InputStream inputStream = new FileInputStream(f);
            OutputStream outputStream = new FileOutputStream(new File("C:\\Users\\petri\\Desktop\\apk\\" + dnf.format(tmp) + ".jpg"));
            OutputStream stampa = new FileOutputStream(new File("C:\\Users\\petri\\Desktop\\stampa\\"+dnf.format(tmp)+".jpg"));

            File time = new File("C:\\Users\\petri\\Desktop\\time\\"+dnf.format(tmp)+".txt");
            FileOutputStream timeOutput = new FileOutputStream(time);
            timeOutput.write((getHour()+":"+getMinutes()+"0").getBytes());
            timeOutput.close();
            
            float quality = 0.5f;
            // create a BufferedImage as the result of decoding the supplied InputStream
           BufferedImage imageStampa = ImageIO.read(inputStream);
            BufferedImage imageApk = imageStampa;


            // get all image writers for JPG format
            Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");
            Iterator<ImageWriter> writersStampa = ImageIO.getImageWritersByFormatName("jpg");

            if (!writers.hasNext()) {
                throw new IllegalStateException("No writers found");
            }

            ImageWriter writer = (ImageWriter) writers.next();
            ImageWriter writerStampa = (ImageWriter) writersStampa.next();

            ImageOutputStream ios = ImageIO.createImageOutputStream(outputStream);
            ImageOutputStream iosStampa = ImageIO.createImageOutputStream(stampa);

            writer.setOutput(ios);
            writerStampa.setOutput(iosStampa);

            ImageWriteParam param = writer.getDefaultWriteParam();
//
//             // compress to a given quality
//             param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
//             param.setCompressionQuality(quality);

            try {
                imageStampa=resizeImage(false, imageStampa, 2327, 2327);
            } catch (Exception ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                imageApk = resizeImage(true, imageStampa, 800, 800);
            } catch (Exception ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
          
            writer.write(null, new IIOImage(imageApk, null, null), param);
            writerStampa.write(null, new IIOImage(imageStampa, null, null), param);
            
            // close all streams
            inputStream.close();
            outputStream.close();
            stampa.close();
            writer.dispose();
            writerStampa.dispose();
            ios.close();
            iosStampa.close();

            File josJedanVeliki = new File("C:\\Users\\petri\\Desktop\\tempSingleton.txt");
            FileOutputStream fos = new FileOutputStream(josJedanVeliki);
            fos.write(("" + (tmp + 1)).getBytes());
            fos.close();

            ///rename picture
            Path old = Paths.get(f.getAbsolutePath());
            Path nw = Paths.get("C:\\Users\\petri\\Desktop\\Original\\" + dnf.format(tmp) + ".jpg");
            try {
                Files.move(old, nw, StandardCopyOption.REPLACE_EXISTING);
                System.out.println("File was successfully renamed");
            } catch (IOException e) {
                e.printStackTrace();
                System.out.println("Error: Unable to rename file");
            }

            tmp++;
            prevval += 1;

        }
        radi = true;
        if (pristigao) {
            pristigao = false;
            radi = false;
            t.run();

            // call back run()
        }

    }

}
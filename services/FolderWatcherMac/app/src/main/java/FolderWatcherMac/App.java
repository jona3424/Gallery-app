/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FolderWatcherMac;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Main.java to edit this template
 */


import org.imgscalr.Scalr;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.text.DecimalFormat;
import java.util.*;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;



/**
 *
 * @author petri
 */
public class App {

    static boolean radi = true;static boolean pristigao = false;
    static File[] sveSlike;
    static 
        DecimalFormat dnf = new DecimalFormat("00000");
     static int tmp;
     static int prevval;
     static Thread t;
     
      static  WatchKey key;
    
    
   // static boolean radi = true;
    
      static File[] listBezHidden(String path){
          File files[] = new File(path).listFiles();
          ArrayList<File> fajls = new ArrayList<>();
          for(File f: files){
              if(!f.getAbsolutePath().contains("/.")){
              fajls.add(f);
              System.out.println(f.getAbsolutePath());}
          }
          File[] fi = new File[fajls.size()];
         
          return (File[]) fajls.toArray(fi);
      }
      
 static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {
    BufferedImage scaled =Scalr.resize(originalImage, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, targetWidth, targetHeight, Scalr.OP_ANTIALIAS);

    return scaled;
}
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException, InterruptedException {
         
        sveSlike = listBezHidden("/Users/editor/Desktop/apk folder");
      tmp =sveSlike.length;
        prevval=tmp;
         WatchService watchService
          = FileSystems.getDefault().newWatchService();

        Path path = Paths.get("/Users/editor/Desktop/Original slike");

        path.register(
          watchService, 
            StandardWatchEventKinds.ENTRY_CREATE, 
              StandardWatchEventKinds.ENTRY_DELETE, 
                StandardWatchEventKinds.ENTRY_MODIFY);

        while ((key = watchService.take()) != null) {
            
            for (WatchEvent<?> event : key.pollEvents()) {
                //proces
            if(!radi){
             pristigao = true;
            }else{
                
        radi = false;
           t = new Thread() {
               @Override
               public void run() {  try {
                   // override the run() to specify the running behavior
                   reku();
                   

                   } catch (IOException ex) {
                       Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                   }
               }
            };
            Thread.sleep(400);
            t.start();  // call back run()
            }
            }
            
                 key.reset();
            
       }
       
    }
    
  
    
    static void reku() throws IOException{
        
        
        sveSlike = listBezHidden("/Users/editor/Desktop/Original slike");
            Arrays.sort(sveSlike);
            int ng = sveSlike.length;
            for(File f : sveSlike){
                System.out.println(f.getAbsolutePath());
            }
            while(prevval<ng){  

            
             File f = sveSlike[prevval];
             //if(f.getAbsolutePath().contains("/.")) {prevval++;continue;}
             InputStream inputStream = new FileInputStream(f);
           
             OutputStream outputStream = new FileOutputStream(new File("/Users/editor/Desktop/apk folder/"+dnf.format(tmp)+".jpg"));
               

             float quality = 0.5f;
             System.out.println("Prevval: "+prevval+" Temp:" +tmp+" FILE:"+f.getAbsolutePath()  );
             // create a BufferedImage as the result of decoding the supplied InputStream
             BufferedImage image = ImageIO.read(inputStream);

             // get all image writers for JPG format
             Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg");

             if (!writers.hasNext())
                 throw new IllegalStateException("No writers found");

             ImageWriter writer = (ImageWriter) writers.next();
             ImageOutputStream ios = ImageIO.createImageOutputStream(outputStream);
             writer.setOutput(ios);

             ImageWriteParam param = writer.getDefaultWriteParam();
//
//             // compress to a given quality
//             param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
//             param.setCompressionQuality(quality);

                try {
                    image=resizeImage(image,600,600);
                } catch (Exception ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
             // appends a complete image stream containing a single image and
             //associated stream and image metadata and thumbnails to the output
             writer.write(null, new IIOImage(image, null, null), param);

           
            
            
             // close all streams
             inputStream.close();
             outputStream.close(); 
             writer.dispose();
             ios.close();
             
             File josJedanVeliki = new File("/Users/editor/Desktop/app/tempSingleton.txt");
             FileOutputStream fos = new FileOutputStream(josJedanVeliki);
             fos.write((""+(tmp+1)).getBytes());
             fos.close();
            
             
              ///rename picture
 
            Path old = Paths.get(f.getAbsolutePath());
            Path  nw= Paths.get("/Users/editor/Desktop/Original slike/"+dnf.format(tmp)+".jpg");
        try {
            Files.move(old, nw, StandardCopyOption.REPLACE_EXISTING);
            System.out.println("File was successfully renamed");
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error: Unable to rename file");
        }   
             
             
              tmp++; 
             prevval+=1;

           
                 }
            radi = true;
            if(pristigao){
            pristigao = false;
            radi = false;
              t.run();
              
  // call back run()
            }
            
            
    }
    
}

